# access configure (and eventually runtime) variables           -*-python-*-
# from Python
#
# use like so:
# import machinetalk_lib.config
# c = machinekit_lib.config.Config()
# if c.is_rt():
#    ....
# define useful aggregate methods in Config() - this is preferrable to
# tests of raw config variables in usercode
#
# edit src/machinetalkcfg.py-tmp.in
# run src/configure
# this will build lib/python/machinekit_lib/config.py
#
# Author: Alexander Roessler <alex AT machinekit DOT com>
# License: GPL Version 2 or later
# Copyright (c) 2021 All rights reserved.
import sys

class Config(object):

    # automatic substitution by configure starts here

    def __init__(self):
        self.EMC2_HOME = "@EMC2_HOME@"
        self.MACHINETALK_INI="@MACHINETALK_INI@"

        # Directories
        self.prefix="@prefix@"
        self.exec_prefix="@exec_prefix@"
        self.EMC2_HOME="@EMC2_HOME@"
        self.LIB_DIR="@EMC2_HOME@/lib"

        #used for install stuff
        #but have them here as reference
        #build system only uses EMC2_RTLIB_DIR when creating rtapi.ini
        self.EMC2_BIN_DIR="@EMC2_BIN_DIR@"
        self.EMC2_TCL_DIR="@EMC2_TCL_DIR@"
        self.EMC2_HELP_DIR="@EMC2_HELP_DIR@"
        self.EMC2_RTLIB_DIR="@EMC2_RTLIB_DIR@"
        self.EMC2_USER_CONFIG_DIR="~/emc2/configs"
        self.EMC2_SYSTEM_CONFIG_DIR="@EMC2_SYSTEM_CONFIG_DIR@"
        self.EMC2_NCFILES_DIR="@EMC2_NCFILES_DIR@"
        self.REALTIME="@REALTIME@"
        self.EMC2_IMAGEDIR="@EMC2_IMAGE_DIR@"


        # Standard configure directories
        # do we really need these?
        self.bindir = "@bindir@"
        self.sbindir = "@sbindir@"
        self.libexecdir = "@libexecdir@"
        self.datadir = "@datadir@"
        self.datarootdir = "@datarootdir@"
        self.sysconfdir = "@sysconfdir@"
        self.sharedstatedir = "@sharedstatedir@"
        self.localstatedir = "@localstatedir@"
        self.libdir = "@libdir@"
        self.infodir = "@infodir@"
        self.mandir = "@mandir@"
        self.includedir = "@includedir@"
        self.docdir = "@docdir@"
        self.sampleconfsdir = self.datadir + \
                              "/linuxcnc/examples/sample-configs"
        self.ncfilesdir = self.prefix + "/share/linuxcnc/ncfiles"
        self.tcldir = self.prefix + "/lib/tcltk/linuxcnc"


        # i18n variables:
        self.package = "@PACKAGE@"
        self.localedir = "@LOCALEDIR@"
        self.LANGUAGES = "@LANGUAGES@"


        # /Standard configure directories
        self.RUN_IN_PLACE = "@RUN_IN_PLACE@"
        self.CC = "@CC@"
        self.MANDB = "@MANDB@"
        self.HIDRAW_H_USABLE = "@HIDRAW_H_USABLE@"


        self.LIBUDEV_CFLAGS="@LIBUDEV_CFLAGS@"
        self.LIBUDEV_LIBS="@LIBUDEV_LIBS@"

        # deps for xemc
        self.CFLAGS_X = "@X_CFLAGS@"

        # readline support for halcmd
        self.READLINE_LIBS =  "@READLINE_LIBS@"

        # flags for glib
        self.GLIB_CFLAGS = "@GLIB_CFLAGS@"
        self.GLIB_LIBS = "@GLIB_LIBS@"

        # local flags for GTK include
        self.GTK_CFLAGS = "@GTK_CFLAGS@"
        self.GTK_LIBS = "@GTK_LIBS@"
        self.HAVE_GNOMEPRINT = "@HAVE_GNOMEPRINT@"

        # tcl tk cflags, includes and libs
        self.TCL_DBGX="@TCL_DBGX@"
        self.TK_DBGX="@TK_DBGX@"
        self.TCL_CFLAGS="@TCL_CFLAGS@ @TK_CFLAGS@"
        self.TCL_LIBS="@TCL_LIBS@ @TK_LIBS@ @LIBS@"
        self.HAVE_WORKING_BLT="@HAVE_WORKING_BLT@"


        self.AR = "@AR@"
        self.ARFLAGS = "cr" #??
        self.CXX = "@CXX@"
        self.CXXFLAGS = "@CFLAGS@"
        self.RANLIB = "@RANLIB@"
        self.MSGFMT = "@MSGFMT@"
        self.XGETTEXT = "@XGETTEXT@"

        self.BUILD_DOCS = "@BUILD_DOCS@"
        self.BUILD_DOCS_PDF = "@BUILD_DOCS_PDF@"
        self.BUILD_DOCS_HTML = "@BUILD_DOCS_HTML@"
        self.PYTHON = "@PYTHON@"

        self.BUILD_PYTHON="@BUILD_PYTHON@"
        self.INCLUDEPY="@INCLUDEPY@"
        self.SITEPY="@SITEPY@"


# global Config exposes variable to module
__config = Config()
for attr in dir(__config):
    if not attr.startswith("__"):
        setattr(sys.modules[__name__], attr, getattr(__config, attr))

